alula {
  Program     =  newline* Block newline*
  Block       =  (Stmt)*

  Stmt        =  newline* SimpleStmt newline*     -- simple
  			      |  newline* "function" id ":" Params? Suite newline*  -- function
              |  newline* "for:" ListOf<SimpleStmt,","> Suite newline*    -- for
              |  newline* "while:" Exp Suite newline*              -- while
              |  newline* "if:" Exp Suite
                 (("else if:" Exp Suite)*)?
                 ("else:" Stmt)? newline*         -- if
  SimpleStmt  =  Type Ids ":" Exps                -- vardecl
              |  VarExps (":"| assignop) Exps     -- assign
              |  Call                             -- call
              |  "print:" Exp                     -- print
              |  "break"                          -- break
              |  "return:" Exp?                   -- return
  Suite       =  "{" Stmt* "}"

  Type        =  "string"                         -- string
              |  "num"                            -- number
              |  "bool"                           -- boolean
              |  "list" "[" Type "]"              -- list
              |  "dict" "[" Type "," Type "]"     -- dictionary
              |  "struct"                         -- struct
              |  "undefined"                      -- undefined

  Exp         =  Exp "or" Exp1                    -- or
              |  Exp "and" Exp1                   -- and
              |  Exp1
  Exp1        =  Exp2 relop Exp2                  -- binary
              |  Exp2
  Exp2        =  Exp2 addop Exp3                  -- binary
              |  Exp3
  Exp3        =  Exp3 mulop Exp4                  -- binary
              |  Exp4
  Exp4		    =	 id "->" Exp4					            -- binary
  			      |  Exp5
  Exp5		    =  Exp5 (increment | decrement)       -- unary
              |  Exp6
  Exp6        =  prefixop Exp7                    -- unary
              |  Exp7
  Exp7        =  boollit
              |  numlit
              |  strlit
              |  Call
              |  VarExp
              |  "(" Exp ")"                      -- parens
  Call        =  VarExp ":" Args

  Exps        =  NonemptyListOf<Exp, ",">
  Ids         =  NonemptyListOf<id, ",">
  VarExp      =  VarExp "[" Exp "]"               -- subscripted
              |  id                               -- simple
  VarExps     =  NonemptyListOf<VarExp, ",">
  Param       =  id (":" Exp)?                    -- exp
              |  Type id                          -- simple
  Params      =  Param ("," Param)*
  Arg         =  (id ":")? Exp
  Args        =  ListOf<Arg, ",">

  keyword     =  ("while" | "if" | "else if" | "else" | "function" | "string"
              | "num" | "bool" | "list" | "dict" | "struct" | "undefined" | "return"
              |  "break" | "and" | "or" | "not" | "true" | "false" | "for") ~idrest
  id          =  ~keyword ("_" | letter) idrest*
  idrest      =  "_" | alnum
  numlit      =  digit+ ("." digit+)? (("E" | "e") ("+" | "-")? digit+)?
  boollit     =  "true" | "false"
  strlit      = "\"" (~"\\" ~"\"" ~"\n" any | escape)* "\""
  escape      = "\\" ("\\" | "\"" | "n")          -- simple
              | "\\u{" hexDigit+ "}"              -- codepoint
  addop       =  "+" | "-"
  relop       =  "<=" | "<" | "==" | "!=" | ">=" | ">"
  mulop       =  "*" | "/" | "%"
  assignop	  =  "+:" | "-:" | "*:" | "%:"
  increment   = "++"
  decrement   = "--"
  prefixop    =  "-" | "not"
  newline     =  "\n"+
  space       :=  " " | "\t" | comment
  comment     =  "#" ~":" (~"\n" any)* "\n"
              |  "#:" (any)* ":#"
}
