alÃ¼la {
  Program     =   Block
  Block       =  (Stmt)*

  Stmt        =  SimpleStmt                             -- simple
              |  "function" id ":" Params? Suite        -- function
              |  "for:" VarDecl "," Exp "," Exp Suite   -- for
              |  "while:" Exp Suite                     -- while
              |  "if:" Exp Suite
                 (("else if:" Exp Suite)*)?
                 ("else:" Suite)?                 -- if
  SimpleStmt  =  VarDecl
              |  Call                             -- call
              |  VarExps (":"| assignop) Exps     -- assign
              |  "print:" Exp                     -- print
              |  "break"                          -- break
              |  "return:" Exp?                   -- return
              |	 Exp
  Suite       =  "{" Stmt* "}"


  Type        =  "string"                         -- string
              |  "num"                            -- number
              |  "bool"                           -- boolean
              |  "list" "[" Type "]"              -- list
              |  "dict" "{" Type "," Type "}"     -- dictionary
              |  "struct" "{" StructBindings "}"  -- struct
              |  "undefined"                      -- undefined

  Exp         =  Exp "or" Exp1                    -- or
              |  Exp "and" Exp1                   -- and
              |  Exp1
  Exp1        =  Exp2 relop Exp2                  -- binary
              |  Exp2
  Exp2        =  Exp2 addop Exp3                  -- binary
              |  Exp3
  Exp3        =  Exp3 mulop Exp4                  -- binary
              |  Exp4
  Exp4        =  id "->" Exp4                     -- binary
              |  Exp5
  Exp5        =  Exp5 (increment | decrement)     -- postfix
              |  Exp6
  Exp6        =  prefixop Exp7                    -- prefix
              |  Exp7
  Exp7        =  boollit
              |  numlit
              |  strlit
              |  Listlit
              |  Dictlit
              |  Structlit
              |  Call
              |  VarExp
              |  "undefined"
              |  "(" Exp ")"                      -- parens

  Call           =  VarExp "<-" Args
  Pair           =  Exp ":" Exp
  Structpair     =  id ":" Exp
  Binding        =  Type ":" id
  StructBindings = ListOf<Binding, ",">

  Exps        = NonemptyListOf<Exp, ",">
              | "(" Exps ")"                      -- parens
  Ids         =  NonemptyListOf<id, ",">
  VarDecl	    =	 Type id ":" Exp
  VarExp      =  VarExp "[" Exp "]"               -- subscripted
              |  id                               -- simple
  VarExps     =  NonemptyListOf<VarExp, ",">
  Param       =  Type id (":" Exp)?
  Params      =  ListOf<Param, ",">
  Arg         =  (id ":")? Exp
  Args        =  ListOf<Arg, ",">

  keyword     =  ("while" | "if" | "else if" | "else" | "function" | "string" | "print"
              | "num" | "bool" | "list" | "dict" | "struct" | "undefined" | "return"
              |  "break" | "and" | "or" | "not" | "true" | "false" | "for") ~idrest
  id          =  ~keyword ("_" | letter) idrest*
  idrest      =  "_" | alnum
  numlit      =  digit+ ("." digit+)? (("E" | "e") ("+" | "-")? digit+)?
  boollit     =  "true" | "false"
  strlit      = "\"" (~"\\" ~"\"" ~"\n" any | escape)* "\""
  Listlit     = "[" Exps "]"
  Dictlit     = "{" NonemptyListOf<Pair, ",">  "}"
  Structlit   = "{" NonemptyListOf<Structpair, ","> "}"

  escape      = "\\" ("\\" | "\"" | "n")          -- simple
              | "\\u{" hexDigit+ "}"              -- codepoint
  addop       =  "+" | "-"
  relop       =  "<=" | "<" | "==" | "!=" | ">=" | ">"
  mulop       =  "*" | "/" | "%"
  assignop    =  "+:" | "-:" | "*:" | "%:"
  increment   = "++"
  decrement   = "--"
  prefixop    =  "-" | "not"
  newline     =  "\n"+
  space       += comment | blockComm
  comment     =  "#" ~":" (~"\n" any)* "\n"
  blockComm   =  "#:" (~":#" any)* ":#"

}
